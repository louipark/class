070 = lzhou8, weelim2

Instruction
============
List at least 1 code smell for each question.
List at least 1 code example for each code smell.
Explain the code smell in each example with 1 or 2 sentences. 
(e.g. the process of ... appears 2 times in ... method.)

Answer to Q1
============
We found the following code smell(s): Duplicated code

Here are some example(s) of each code smell: 

Name: Duplicated code

Example 1: The logging code occurs 3 times, 2 times inside Network.requestWorkStationPrintsDocument and 1 time inside Network.requestBroadCast
Code: 
	report.write("\tNode '");
	report.write(startNode.name);
	report.write("' passes packet on.\n");
	report.flush();

-> Code is extracted to be named as method packetMovementLogger(Writer report, Node startNode) which writes/logs packet movement.

Example 2: The logging code for the beginning of report object occurs 2 times inside Network.printDocument.
Code: 
	report.write("\tAccounting -- author = '");
	report.write(author);
	report.write("' -- title = '");
	report.write(title);
	report.write("'\n");

-> Code is extracted to be named as method printDocumentHeaderLogger(Writer report, String author, String title),
which writes/logs the header of every document to be printed.


Answer to Q2
============
We found the following code smell(s): Feature Envy

Here are some example(s) of each code smell:

Name: Feature Envy

Example 1: The method packetMovementLogger(Writer report, Network network) is accessed by a Node object and accesses Node class attributes rather than Network class.

Code: 
	public void packetMovementLogger(Writer report, Network network)
			throws IOException {
		report.write("\tNode '");
		report.write(name);
		report.write("' passes packet on.\n");
		report.flush();
	}

-> Code is moved to Node class and visibility is changed to public as method is never used locally.

Example 2: The method printDocumentHeaderLogger(Writer report, String author, String title) is accessed by the Node object printer and accesses Node class 
attributes rather than Network class.
Code: 
	public void printDocumentHeaderLogger(Writer report, String author, String title) throws IOException {
		report.write("\tAccounting -- author = '");
		report.write(author);
		report.write("' -- title = '");
		report.write(title);
		report.write("'\n");
	}

-> Code is moved to Node class and visibility is changed to public as method is never used locally.

Answer to Q3
============
We found the following code smell(s): Duplicated code/ Message chain

Here are some example(s) of each code smell: 

Name: Duplicated code/Message chain

Example 1: The condition segment packet.destination.equals(currentNode.name) is a long chain and it occurs 2 times in requestWorkStationPrintsDocument 

Code: 
		while ((!packet.destination.equals(currentNode.name))
				& (!packet.origin.equals(currentNode.name))) {
			try {
				currentNode.packetMovementLogger(report, this);
			} catch (IOException exc) {
				// just ignore
			}
	and
	
		if (packet.destination.equals(currentNode.name)) {
					result = printDocument(currentNode, packet, report);
				} 

-> Created a predicate 'atDestination'


Answer to Q4
============
We found the following code smell(s): Switch statement

Here are some example(s) of each code smell: 

Name: Switch statement

Example 1: Duplicated Switch statement can be found in printOn, printHTMLOn, printXMLOn.

Code: 
    //from printXMLOn
	do {
			buf.append("\n\t");
			switch (currentNode.type) {
			case Node.NODE:
				buf.append("<node>");
				buf.append(currentNode.name);
				buf.append("</node>");
				break;
			case Node.WORKSTATION:
				buf.append("<workstation>");
				buf.append(currentNode.name);
				buf.append("</workstation>");
				break;
			case Node.PRINTER:
				buf.append("<printer>");
				buf.append(currentNode.name);
				buf.append("</printer>");
				break;
			default:
				buf.append("<unknown></unknown>");
				break;
			}
			currentNode = currentNode.nextNode;
		} while (currentNode != firstNode);
		
		
	//from printHTMLOn
			do {
			buf.append("\n\t<LI> ");
			switch (currentNode.type) {
			case Node.NODE:
				buf.append("Node ");
				buf.append(currentNode.name);
				buf.append(" [Node]");
				break;
			case Node.WORKSTATION:
				buf.append("Workstation ");
				buf.append(currentNode.name);
				buf.append(" [Workstation]");
				break;
			case Node.PRINTER:
				buf.append("Printer ");
				buf.append(currentNode.name);
				buf.append(" [Printer]");
				break;
			default:
				buf.append("(Unexpected)");
				break;
			}

-> Extracted and moved switch statements in printOn,printHTMLOn,printXMLOn onto the classNode. And Created subclasses WorkStation and Printer to eliminate the conditions.